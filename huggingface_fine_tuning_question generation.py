# -*- coding: utf-8 -*-
"""HuggingFace-Fine-tuning-QuestionGenration.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GkXtFCn1S-WQIjcIny9p4EkQj1ESCuh7

## This codes depicts Fine tuning of T5 model for question genration task

Framework: Pytorch



Dataset: squad dataset

Input: Context

Output: Genrated Question

Accelerated Environment required

Hugging Face account required
"""

#installing
!pip install datasets evaluate transformers rouge-score nltk
!pip install accelerate -U
!pip install transformers[torch]

#Import Necessary Statements
import transformers
from transformers.utils import send_example_telemetry
import datasets
from datasets import load_dataset
from evaluate import load
import random
import pandas as pd
import nltk
nltk.download('punkt')
import numpy as np
from IPython.display import display, HTML
from transformers import AutoTokenizer,AutoModelForSeq2SeqLM, DataCollatorForSeq2Seq, Seq2SeqTrainingArguments, Seq2SeqTrainer

#connecting to Huggingface
!apt install git-lfs
from huggingface_hub import notebook_login

#hungingface login with Secret key
# While setting permission for secret key, Permission = Write
notebook_login()

#telemetry - this tells us which examples and software versions are getting used so we know where to prioritize our maintenance efforts.
from transformers.utils import send_example_telemetry

send_example_telemetry("Question_GEN", framework="pytorch")

"""##Importing training dataset"""

#Importing training datase
raw_datasets = load_dataset("rajpurkar/squad") #squad dataset
metric = load("rouge")
raw_datasets

#displaying training data set
def show_random_elements(dataset, num_examples=5):
    assert num_examples <= len(dataset), "Can't pick more elements than there are in the dataset."
    picks = []
    for _ in range(num_examples):
        pick = random.randint(0, len(dataset)-1)
        while pick in picks:
            pick = random.randint(0, len(dataset)-1)
        picks.append(pick)

    df = pd.DataFrame(dataset[picks])
    for column, typ in dataset.features.items():
        if isinstance(typ, datasets.ClassLabel):
            df[column] = df[column].transform(lambda i: typ.names[i])
    display(HTML(df.to_html()))

show_random_elements(raw_datasets["train"])

#The metric is an instance of datasets.Metric:
metric

#Initializing model name variable and tokenizer
model_checkpoint = "t5-small"
tokenizer = AutoTokenizer.from_pretrained(model_checkpoint)

# pre-set parameters for tokenizing function
prefix = "generate question: "
max_input_length = 1100
max_target_length = 128

# Tokenizing function
def preprocess_function(examples):
    inputs = [prefix + doc for doc in examples['context']]
    model_inputs = tokenizer(inputs, max_length=max_input_length, truncation=True)

    # Setup the tokenizer for targets
    labels = tokenizer(text_target=examples['question'], max_length=max_target_length, truncation=True)

    model_inputs["labels"] = labels["input_ids"]

    return model_inputs

#displaying samples
preprocess_function(raw_datasets['train'][:2])

#To apply this function on all the pairs of sentences in our dataset, we just use the `map` method of our `dataset` object we created earlier.
#This will apply the function on all the elements of all the splits in `dataset`, so our training, validation and testing data will be preprocessed in one single command.
tokenized_datasets = raw_datasets.map(preprocess_function, batched=True)

"""##Fine-tuning a model on Question genration task



"""

#download the pretrained model and initalizing
model = AutoModelForSeq2SeqLM.from_pretrained(model_checkpoint)

#declaring Seq2Seq Training Arguments
batch_size = 16
model_name = model_checkpoint.split("/")[-1]
args = Seq2SeqTrainingArguments(
    f"{model_name}-finetuned-QuestionGen",
    evaluation_strategy = "epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=batch_size,
    per_device_eval_batch_size=batch_size,
    weight_decay=0.01,
    save_total_limit=3,
    num_train_epochs=3,
    predict_with_generate=True,
    push_to_hub=True,
)

#data collector
data_collator = DataCollatorForSeq2Seq(tokenizer, model=model)

# Evaluation matrix
def compute_metrics(eval_pred):
    predictions, labels = eval_pred
    decoded_preds = tokenizer.batch_decode(predictions, skip_special_tokens=True)
    # Replace -100 in the labels as we can't decode them.
    labels = np.where(labels != -100, labels, tokenizer.pad_token_id)
    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)

    # Rouge expects a newline after each sentence
    decoded_preds = ["\n".join(nltk.sent_tokenize(pred.strip())) for pred in decoded_preds]
    decoded_labels = ["\n".join(nltk.sent_tokenize(label.strip())) for label in decoded_labels]

    # Note that other metrics may not have a `use_aggregator` parameter
    # and thus will return a list, computing a metric for each sentence.
    result = metric.compute(predictions=decoded_preds, references=decoded_labels, use_stemmer=True, use_aggregator=True)
    # Extract a few results
    result = {key: value * 100 for key, value in result.items()}

    # Add mean generated length
    prediction_lens = [np.count_nonzero(pred != tokenizer.pad_token_id) for pred in predictions]
    result["gen_len"] = np.mean(prediction_lens)

    return {k: round(v, 4) for k, v in result.items()}

trainer = Seq2SeqTrainer(
    model,
    args,
    train_dataset=tokenized_datasets["train"],
    eval_dataset=tokenized_datasets["validation"],
    data_collator=data_collator,
    tokenizer=tokenizer,
    compute_metrics=compute_metrics,
)

trainer.train()

#pusing trained model to Huggingface
trainer.push_to_hub()